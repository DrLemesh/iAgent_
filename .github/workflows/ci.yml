name: 🔍 Continuous Integration (CI)

on:
  # Trigger CI on push to main and develop branches
  push:
    branches: [ main, develop ]
  # Trigger CI on pull requests to main
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Use Node.js version 18 as default
  NODE_VERSION: '18'
  # Cache keys for dependency caching
  CACHE_KEY_PREFIX: 'node-deps'

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: 🧹 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for affected files detection
          fetch-depth: 0

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-
            nx-${{ runner.os }}-

      - name: 🧹 Run ESLint (Frontend)
        run: |
          echo "🔍 Linting Frontend Application..."
          npx nx lint frontend --format=stylish
        continue-on-error: false

      - name: 🧹 Run ESLint (Backend)
        run: |
          echo "🔍 Linting Backend Application..."
          npx nx lint backend --format=stylish
        continue-on-error: false

      - name: 💅 Check Prettier formatting
        run: |
          echo "💅 Checking code formatting..."
          npx prettier --check "apps/**/*.{ts,tsx,js,jsx,json,md}" "libs/**/*.{ts,tsx,js,jsx,json,md}" "*.{js,json,md}"

      - name: 📊 Generate lint report
        if: always()
        run: |
          echo "📊 Generating comprehensive lint report..."
          npx nx run-many -t lint --output-style=json > lint-results.json || true
          
      - name: 📋 Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: lint-results.json
          retention-days: 30

  # Job 2: TypeScript Type Checking
  type-check:
    name: 🔧 TypeScript Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🔧 TypeScript check (Frontend)
        run: |
          echo "🔧 Type checking Frontend..."
          npx nx typecheck frontend

      - name: 🔧 TypeScript check (Backend)
        run: |
          echo "🔧 Type checking Backend..."
          npx nx typecheck backend

      - name: 📊 Generate TypeScript report
        if: always()
        run: |
          echo "📊 Generating TypeScript compilation report..."
          npx tsc --noEmit --pretty > typescript-report.log 2>&1 || true

      - name: 📋 Upload TypeScript report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: typescript-report
          path: typescript-report.log
          retention-days: 30

  # Job 3: Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        # Test on multiple Node.js versions for compatibility
        node-version: ['18', '20']
        project: ['frontend', 'backend']
      fail-fast: false
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🧪 Run tests for ${{ matrix.project }}
        run: |
          echo "🧪 Running tests for ${{ matrix.project }} on Node.js ${{ matrix.node-version }}..."
          npx nx test ${{ matrix.project }} --coverage --watchAll=false --passWithNoTests
        env:
          CI: true

      - name: 📊 Upload test coverage to Codecov
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/apps/${{ matrix.project }}
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage
          fail_ci_if_error: false

      - name: 📋 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.project }}-node${{ matrix.node-version }}
          path: |
            coverage/apps/${{ matrix.project }}
            **/test-results.xml
          retention-days: 30

  # Job 4: Build Verification
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [code-quality, type-check]
    
    strategy:
      matrix:
        project: ['frontend', 'backend']
        configuration: ['development', 'production']
      fail-fast: false
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Cache Nx computation cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: 🏗️ Build ${{ matrix.project }} (${{ matrix.configuration }})
        run: |
          echo "🏗️ Building ${{ matrix.project }} with ${{ matrix.configuration }} configuration..."
          npx nx build ${{ matrix.project }} --configuration=${{ matrix.configuration }}

      - name: 📊 Analyze bundle size (Frontend only)
        if: matrix.project == 'frontend' && matrix.configuration == 'production'
        run: |
          echo "📊 Analyzing bundle size..."
          du -sh dist/apps/frontend
          find dist/apps/frontend -name "*.js" -exec du -h {} \; | sort -hr

      - name: 📋 Upload build artifacts
        if: matrix.configuration == 'production'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.project }}-${{ matrix.configuration }}
          path: dist/apps/${{ matrix.project }}
          retention-days: 30

  # Job 5: Security Scanning
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Run npm audit
        run: |
          echo "🔒 Running npm security audit..."
          npm audit --audit-level=moderate --no-fund

      - name: 🔍 Run CodeQL Analysis
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript,typescript

      - name: 📊 Generate security report
        if: always()
        run: |
          echo "📊 Generating security report..."
          npm audit --json > security-audit.json || true

      - name: 📋 Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-audit.json
          retention-days: 30

  # Job 6: Dependency Check
  dependencies:
    name: 📦 Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Check for outdated packages
        run: |
          echo "🔍 Checking for outdated packages..."
          npm outdated || true

      - name: 📊 Analyze dependency tree
        run: |
          echo "📊 Analyzing dependency tree..."
          npx nx graph --file=dependency-graph.json
          
      - name: 🔍 Check Nx project dependencies
        run: |
          echo "🔍 Checking Nx project dependencies..."
          npx nx affected:dep-graph --file=affected-graph.json || true

  # Job 7: Performance Tests (Frontend)
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: build-frontend-production
          path: dist/apps/frontend

      - name: ⚡ Start preview server
        run: |
          echo "⚡ Starting preview server..."
          npx nx preview frontend &
          sleep 10
        
      - name: 🏎️ Run Lighthouse CI
        run: |
          echo "🏎️ Running Lighthouse performance audit..."
          npm install -g @lhci/cli
          lhci autorun --upload.target=temporary-public-storage || true

  # Job 8: Integration Summary
  ci-success:
    name: ✅ CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [code-quality, type-check, unit-tests, build, security, dependencies, performance]
    if: always()
    
    steps:
      - name: ✅ All CI checks passed
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "🎉 Code is ready for deployment!"
          
      - name: ❌ CI checks failed
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          echo "❌ Some CI checks failed!"
          echo "🔍 Please review the failed jobs and fix issues before merging."
          exit 1

      - name: 📊 CI Summary
        if: always()
        run: |
          echo "📊 CI Pipeline Summary:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Dependencies: ${{ needs.dependencies.result }}"
          echo "Performance: ${{ needs.performance.result }}" 